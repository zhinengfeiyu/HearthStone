package com.caiyu.hearthstone.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.caiyu.hearthstone.model.entity.CardEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "card".
*/
public class CardDao extends AbstractDao<CardEntity, Long> {

    public static final String TABLENAME = "card";

    /**
     * Properties of entity CardEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Color = new Property(2, String.class, "color", false, "COLOR");
        public final static Property Cost = new Property(3, int.class, "cost", false, "COST");
        public final static Property Job = new Property(4, String.class, "job", false, "JOB");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Attack = new Property(6, Integer.class, "attack", false, "ATTACK");
        public final static Property Blood = new Property(7, Integer.class, "blood", false, "BLOOD");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
    };


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"card\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"COLOR\" TEXT NOT NULL ," + // 2: color
                "\"COST\" INTEGER NOT NULL ," + // 3: cost
                "\"JOB\" TEXT NOT NULL ," + // 4: job
                "\"TYPE\" TEXT NOT NULL ," + // 5: type
                "\"ATTACK\" INTEGER," + // 6: attack
                "\"BLOOD\" INTEGER," + // 7: blood
                "\"DESCRIPTION\" TEXT);"); // 8: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"card\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CardEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getColor());
        stmt.bindLong(4, entity.getCost());
        stmt.bindString(5, entity.getJob());
        stmt.bindString(6, entity.getType());
 
        Integer attack = entity.getAttack();
        if (attack != null) {
            stmt.bindLong(7, attack);
        }
 
        Integer blood = entity.getBlood();
        if (blood != null) {
            stmt.bindLong(8, blood);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CardEntity readEntity(Cursor cursor, int offset) {
        CardEntity entity = new CardEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // color
            cursor.getInt(offset + 3), // cost
            cursor.getString(offset + 4), // job
            cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // attack
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // blood
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CardEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setColor(cursor.getString(offset + 2));
        entity.setCost(cursor.getInt(offset + 3));
        entity.setJob(cursor.getString(offset + 4));
        entity.setType(cursor.getString(offset + 5));
        entity.setAttack(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBlood(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CardEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CardEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
